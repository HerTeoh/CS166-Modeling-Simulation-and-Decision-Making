import random
import numpy as np
import matplotlib.pyplot as plt

class The_Dark_Knight_Rises(object):
    
    def __init__(self):
        '''
        The current state is initialised at 0 and every subsequant state
        visited is appended to a list to be visualised.
        '''
        self.current_x = 0
        self.visited = []

    def target_density(self, x):
        '''
        The target density which takes a parameter is defined
        '''
        Z = 24.44321494051954
        if abs(x) > 7:
            return 0
        elif abs(x) > 3:
            return 3 * (1 - (x / 7) ** 2) ** 0.5 / Z
        elif abs(x) > 1:
            return ((3 - abs(x)) / 2 -3/7 * 10**0.5 * ((3 - x**2 + 2*abs(x))**0.5 - 2)) / Z
        elif abs(x) > 0.75:
            return (9 - 8 * abs(x)) / Z
        elif abs(x) > 0.5:
            return (3 * abs(x) + 0.75) / Z
        else:
            return 2.25 / Z
    
    def step(self):
        '''
        The next states are randomly retrieved from a proposal distribution
        and accepted or rejected based on a probability function defined by
        the target density of the potential next state and the target density
        of the current state.
        '''
        next_x = np.random.normal(self.current_x, 2)
        if random.random() < min(1, self.target_density(next_x)/self.target_density(self.current_x)):
            self.current_x = next_x
        else:
            self.current_x = self.current_x
        self.visited.append(self.current_x)
        
    def simulate(self, steps):
        '''
        Based on the number of steps specified, this method produces 10 histograms.
        '''
        self.steps = steps
        for i in range(10):
            for j in range(int(self.steps/10)):
                self.step()
            self.visualise()
    
    def visualise(self):
        '''
        A hardcoded histogrma visualisation method using the data of states visited.
        '''
        plt.axis([-8, 8, 0, 5200])
        plt.ylabel('counts')
        plt.xlabel('state')
        plt.hist(self.visited, 30)        
        plt.show()
